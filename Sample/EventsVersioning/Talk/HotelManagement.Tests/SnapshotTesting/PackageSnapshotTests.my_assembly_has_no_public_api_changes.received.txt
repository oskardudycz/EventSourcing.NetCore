[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
namespace HotelManagement.EventStore
{
    public class CommandHandler<T, TEvent>
        where TEvent :  notnull
    {
        public CommandHandler(HotelManagement.EventStore.IEventStore eventStore, System.Func<T, TEvent, T> evolve, System.Func<T> getInitial) { }
        public System.Threading.Tasks.Task GetAndUpdate(System.Guid id, System.Func<T, TEvent[]> handle, System.Threading.CancellationToken ct) { }
    }
    public class EventMetadata : System.IEquatable<HotelManagement.EventStore.EventMetadata>
    {
        public EventMetadata(System.Guid CorrelationId) { }
        public System.Guid CorrelationId { get; init; }
    }
    public class EventSerializer
    {
        public EventSerializer(HotelManagement.EventStore.EventTypeMapping mapping, HotelManagement.EventStore.EventTransformations transformations, HotelManagement.EventStore.StreamTransformations? streamTransformations = null) { }
        public System.Collections.Generic.List<object?> Deserialize(System.Collections.Generic.List<HotelManagement.EventStore.SerializedEvent> events) { }
        public object? Deserialize(string eventTypeName, string json) { }
    }
    public class EventTransformations
    {
        public EventTransformations() { }
        public HotelManagement.EventStore.EventTransformations Register<TEvent>(string eventTypeName, System.Func<System.Text.Json.JsonDocument, TEvent> transformJson)
            where TEvent :  notnull { }
        public HotelManagement.EventStore.EventTransformations Register<TOldEvent, TEvent>(string eventTypeName, System.Func<TOldEvent, TEvent> transformEvent)
            where TOldEvent :  notnull
            where TEvent :  notnull { }
        public bool TryTransform(string eventTypeName, string json, out object? result) { }
    }
    public class EventTypeMapping
    {
        public EventTypeMapping() { }
        public HotelManagement.EventStore.EventTypeMapping CustomMap(System.Type eventType, params string[] eventTypeNames) { }
        public HotelManagement.EventStore.EventTypeMapping CustomMap<T>(params string[] eventTypeNames) { }
        public string ToName(System.Type eventType) { }
        public string ToName<TEventType>() { }
        public System.Type? ToType(string eventTypeName) { }
    }
    public interface IEventStore
    {
        System.Threading.Tasks.ValueTask AppendToStream(System.Guid streamId, System.Collections.Generic.IEnumerable<object> newEvents, System.Threading.CancellationToken ct = default);
        System.Threading.Tasks.ValueTask<TEvent[]> ReadStream<TEvent>(System.Guid streamId, System.Threading.CancellationToken ct = default)
            where TEvent :  notnull;
    }
    public class InMemoryEventStore : HotelManagement.EventStore.IEventStore
    {
        public InMemoryEventStore() { }
        public System.Threading.Tasks.ValueTask AppendToStream(System.Guid streamId, System.Collections.Generic.IEnumerable<object> newEvents, System.Threading.CancellationToken _ = default) { }
        public System.Threading.Tasks.ValueTask<TEvent[]> ReadStream<TEvent>(System.Guid streamId, System.Threading.CancellationToken _ = default)
            where TEvent :  notnull { }
    }
    public class SerializedEvent : System.IEquatable<HotelManagement.EventStore.SerializedEvent>
    {
        public SerializedEvent(string EventType, string Data, string MetaData = "") { }
        public string Data { get; init; }
        public string EventType { get; init; }
        public string MetaData { get; init; }
    }
    public class StreamTransformations
    {
        public StreamTransformations() { }
        public HotelManagement.EventStore.StreamTransformations Register(System.Func<System.Collections.Generic.List<HotelManagement.EventStore.SerializedEvent>, System.Collections.Generic.List<HotelManagement.EventStore.SerializedEvent>> transformJson) { }
        public System.Collections.Generic.List<HotelManagement.EventStore.SerializedEvent> Transform(System.Collections.Generic.List<HotelManagement.EventStore.SerializedEvent> events) { }
    }
}
namespace HotelManagement.GuestStayAccounts
{
    public class GuestStayAccount : System.IEquatable<HotelManagement.GuestStayAccounts.GuestStayAccount>
    {
        public static readonly HotelManagement.GuestStayAccounts.GuestStayAccount Initial;
        public GuestStayAccount(string Id, [System.Runtime.CompilerServices.DecimalConstant(0, 0, 0u, 0u, 0u)] decimal Balance, HotelManagement.GuestStayAccounts.GuestStayAccountStatus Status = 1) { }
        public bool IsSettled { get; }
        public decimal Balance { get; init; }
        public string Id { get; init; }
        public HotelManagement.GuestStayAccounts.GuestStayAccountStatus Status { get; init; }
        public HotelManagement.GuestStayAccounts.GuestStayAccount Evolve(HotelManagement.GuestStayAccounts.GuestStayAccountEvent @event) { }
    }
    public abstract class GuestStayAccountCommand : System.IEquatable<HotelManagement.GuestStayAccounts.GuestStayAccountCommand>
    {
        public class CheckIn : HotelManagement.GuestStayAccounts.GuestStayAccountCommand, System.IEquatable<HotelManagement.GuestStayAccounts.GuestStayAccountCommand.CheckIn>
        {
            public CheckIn(string ClerkId, string GuestStayId, string RoomId, System.DateTimeOffset Now) { }
            public string ClerkId { get; init; }
            public string GuestStayId { get; init; }
            public System.DateTimeOffset Now { get; init; }
            public string RoomId { get; init; }
        }
        public class CheckOut : HotelManagement.GuestStayAccounts.GuestStayAccountCommand, System.IEquatable<HotelManagement.GuestStayAccounts.GuestStayAccountCommand.CheckOut>
        {
            public CheckOut(string ClerkId, string GuestStayAccountId, System.DateTimeOffset Now) { }
            public string ClerkId { get; init; }
            public string GuestStayAccountId { get; init; }
            public System.DateTimeOffset Now { get; init; }
        }
        public class RecordCharge : HotelManagement.GuestStayAccounts.GuestStayAccountCommand, System.IEquatable<HotelManagement.GuestStayAccounts.GuestStayAccountCommand.RecordCharge>
        {
            public RecordCharge(string GuestStayAccountId, decimal Amount, System.DateTimeOffset Now) { }
            public decimal Amount { get; init; }
            public string GuestStayAccountId { get; init; }
            public System.DateTimeOffset Now { get; init; }
        }
        public class RecordPayment : HotelManagement.GuestStayAccounts.GuestStayAccountCommand, System.IEquatable<HotelManagement.GuestStayAccounts.GuestStayAccountCommand.RecordPayment>
        {
            public RecordPayment(string GuestStayAccountId, decimal Amount, System.DateTimeOffset Now) { }
            public decimal Amount { get; init; }
            public string GuestStayAccountId { get; init; }
            public System.DateTimeOffset Now { get; init; }
        }
    }
    public static class GuestStayAccountDecider
    {
        public static HotelManagement.GuestStayAccounts.GuestStayAccountEvent.GuestCheckedIn CheckIn(HotelManagement.GuestStayAccounts.GuestStayAccountCommand.CheckIn command, HotelManagement.GuestStayAccounts.GuestStayAccount state) { }
        public static HotelManagement.GuestStayAccounts.GuestStayAccountEvent CheckOut(HotelManagement.GuestStayAccounts.GuestStayAccountCommand.CheckOut command, HotelManagement.GuestStayAccounts.GuestStayAccount state) { }
        public static HotelManagement.GuestStayAccounts.GuestStayAccountEvent.ChargeRecorded RecordCharge(HotelManagement.GuestStayAccounts.GuestStayAccountCommand.RecordCharge command, HotelManagement.GuestStayAccounts.GuestStayAccount state) { }
        public static HotelManagement.GuestStayAccounts.GuestStayAccountEvent.PaymentRecorded RecordPayment(HotelManagement.GuestStayAccounts.GuestStayAccountCommand.RecordPayment command, HotelManagement.GuestStayAccounts.GuestStayAccount state) { }
    }
    public abstract class GuestStayAccountEvent : System.IEquatable<HotelManagement.GuestStayAccounts.GuestStayAccountEvent>
    {
        public class ChargeRecorded : HotelManagement.GuestStayAccounts.GuestStayAccountEvent, System.IEquatable<HotelManagement.GuestStayAccounts.GuestStayAccountEvent.ChargeRecorded>
        {
            public ChargeRecorded(string GuestStayAccountId, decimal Amount, System.DateTimeOffset RecordedAt) { }
            public decimal Amount { get; init; }
            public string GuestStayAccountId { get; init; }
            public System.DateTimeOffset RecordedAt { get; init; }
        }
        public class GuestCheckedIn : HotelManagement.GuestStayAccounts.GuestStayAccountEvent, System.IEquatable<HotelManagement.GuestStayAccounts.GuestStayAccountEvent.GuestCheckedIn>
        {
            public GuestCheckedIn(string GuestStayAccountId, string GuestStayId, string RoomId, string ClerkId, System.DateTimeOffset CheckedInAt) { }
            public System.DateTimeOffset CheckedInAt { get; init; }
            public string ClerkId { get; init; }
            public string GuestStayAccountId { get; init; }
            public string GuestStayId { get; init; }
            public string RoomId { get; init; }
        }
        public class GuestCheckedOut : HotelManagement.GuestStayAccounts.GuestStayAccountEvent, System.IEquatable<HotelManagement.GuestStayAccounts.GuestStayAccountEvent.GuestCheckedOut>
        {
            public GuestCheckedOut(string GuestStayAccountId, string ClerkId, System.DateTimeOffset CheckedOutAt) { }
            public System.DateTimeOffset CheckedOutAt { get; init; }
            public string ClerkId { get; init; }
            public string GuestStayAccountId { get; init; }
        }
        public class GuestCheckoutFailed : HotelManagement.GuestStayAccounts.GuestStayAccountEvent, System.IEquatable<HotelManagement.GuestStayAccounts.GuestStayAccountEvent.GuestCheckoutFailed>
        {
            public GuestCheckoutFailed(string GuestStayAccountId, string ClerkId, HotelManagement.GuestStayAccounts.GuestStayAccountEvent.GuestCheckoutFailed.FailureReason Reason, System.DateTimeOffset FailedAt) { }
            public string ClerkId { get; init; }
            public System.DateTimeOffset FailedAt { get; init; }
            public string GuestStayAccountId { get; init; }
            public HotelManagement.GuestStayAccounts.GuestStayAccountEvent.GuestCheckoutFailed.FailureReason Reason { get; init; }
            public enum FailureReason
            {
                NotOpened = 0,
                BalanceNotSettled = 1,
            }
        }
        public class PaymentRecorded : HotelManagement.GuestStayAccounts.GuestStayAccountEvent, System.IEquatable<HotelManagement.GuestStayAccounts.GuestStayAccountEvent.PaymentRecorded>
        {
            public PaymentRecorded(string GuestStayAccountId, decimal Amount, System.DateTimeOffset RecordedAt) { }
            public decimal Amount { get; init; }
            public string GuestStayAccountId { get; init; }
            public System.DateTimeOffset RecordedAt { get; init; }
        }
    }
    public enum GuestStayAccountStatus
    {
        Opened = 1,
        CheckedOut = 2,
    }
}