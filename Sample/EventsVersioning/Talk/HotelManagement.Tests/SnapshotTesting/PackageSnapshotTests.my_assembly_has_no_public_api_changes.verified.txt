[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
namespace HotelManagement.EventStore
{
    public class CommandHandler<T>
    {
        public CommandHandler(System.Func<T, object, T> evolve, System.Func<T> getInitial) { }
        public System.Threading.Tasks.Task Handle(HotelManagement.EventStore.IEventStore eventStore, string id, System.Func<T, object[]> handle, System.Threading.CancellationToken ct) { }
    }
    public class EventSerializer : HotelManagement.EventStore.IEventSerializer
    {
        public EventSerializer(HotelManagement.EventStore.EventTypeMapping mapping, HotelManagement.EventStore.EventTransformations transformations, HotelManagement.EventStore.StreamTransformations? streamTransformations = null) { }
        public object? Deserialize(HotelManagement.EventStore.SerializedEvent serializedEvent) { }
        public System.Collections.Generic.List<object?> Deserialize(System.Collections.Generic.List<HotelManagement.EventStore.SerializedEvent> events) { }
        public HotelManagement.EventStore.SerializedEvent Serialize(object @event) { }
    }
    public class EventTransformations
    {
        public EventTransformations() { }
        public HotelManagement.EventStore.EventTransformations Register<TEvent>(string eventTypeName, System.Func<System.Text.Json.JsonDocument, TEvent> transformJson)
            where TEvent :  notnull { }
        public HotelManagement.EventStore.EventTransformations Register<TOldEvent, TEvent>(string eventTypeName, System.Func<TOldEvent, TEvent> transformEvent)
            where TOldEvent :  notnull
            where TEvent :  notnull { }
        public bool TryTransform(string eventTypeName, string json, out object? result) { }
    }
    public class EventTypeMapping
    {
        public EventTypeMapping() { }
        public HotelManagement.EventStore.EventTypeMapping CustomMap(System.Type eventType, params string[] eventTypeNames) { }
        public HotelManagement.EventStore.EventTypeMapping CustomMap<T>(params string[] eventTypeNames) { }
        public string ToName(System.Type eventType) { }
        public string ToName<TEventType>() { }
        public System.Type? ToType(string eventTypeName) { }
    }
    public interface IEventSerializer
    {
        object? Deserialize(HotelManagement.EventStore.SerializedEvent serializedEvent);
        System.Collections.Generic.List<object?> Deserialize(System.Collections.Generic.List<HotelManagement.EventStore.SerializedEvent> events);
        HotelManagement.EventStore.SerializedEvent Serialize(object @event);
    }
    public interface IEventStore
    {
        System.Threading.Tasks.ValueTask AppendToStream(string streamId, System.Collections.Generic.IEnumerable<object> newEvents, System.Threading.CancellationToken ct = default);
        System.Threading.Tasks.ValueTask<object[]> ReadStream(string streamId, System.Threading.CancellationToken ct = default);
    }
    public class InMemoryEventStore : HotelManagement.EventStore.IEventStore
    {
        public InMemoryEventStore(HotelManagement.EventStore.EventSerializer eventSerializer) { }
        public System.Threading.Tasks.ValueTask AppendToStream(string streamId, System.Collections.Generic.IEnumerable<object> newEvents, System.Threading.CancellationToken _ = default) { }
        public System.Threading.Tasks.ValueTask<object[]> ReadStream(string streamId, System.Threading.CancellationToken _ = default) { }
    }
    public class SerializedEvent : System.IEquatable<HotelManagement.EventStore.SerializedEvent>
    {
        public SerializedEvent(string EventType, string Data, string MetaData = "") { }
        public string Data { get; init; }
        public string EventType { get; init; }
        public string MetaData { get; init; }
    }
    public class StreamTransformations
    {
        public StreamTransformations() { }
        public HotelManagement.EventStore.StreamTransformations Register(System.Func<System.Collections.Generic.List<HotelManagement.EventStore.SerializedEvent>, System.Collections.Generic.List<HotelManagement.EventStore.SerializedEvent>> transformJson) { }
        public System.Collections.Generic.List<HotelManagement.EventStore.SerializedEvent> Transform(System.Collections.Generic.List<HotelManagement.EventStore.SerializedEvent> events) { }
    }
}
namespace HotelManagement.GuestStayAccounts
{
    public class ChargeRecorded : System.IEquatable<HotelManagement.GuestStayAccounts.ChargeRecorded>
    {
        public ChargeRecorded(string GuestStayAccountId, decimal Amount, System.DateTimeOffset RecordedAt) { }
        public decimal Amount { get; init; }
        public string GuestStayAccountId { get; init; }
        public System.DateTimeOffset RecordedAt { get; init; }
    }
    public class CheckIn : System.IEquatable<HotelManagement.GuestStayAccounts.CheckIn>
    {
        public CheckIn(string ClerkId, string GuestStayId, string RoomId, System.DateTimeOffset Now) { }
        public string ClerkId { get; init; }
        public string GuestStayId { get; init; }
        public System.DateTimeOffset Now { get; init; }
        public string RoomId { get; init; }
    }
    public class CheckOut : System.IEquatable<HotelManagement.GuestStayAccounts.CheckOut>
    {
        public CheckOut(string ClerkId, string GuestStayAccountId, System.DateTimeOffset Now) { }
        public string ClerkId { get; init; }
        public string GuestStayAccountId { get; init; }
        public System.DateTimeOffset Now { get; init; }
    }
    public class GuestCheckedIn : System.IEquatable<HotelManagement.GuestStayAccounts.GuestCheckedIn>
    {
        public GuestCheckedIn(string GuestStayAccountId, string GuestStayId, string RoomId, string ClerkId, System.DateTimeOffset CheckedInAt) { }
        public System.DateTimeOffset CheckedInAt { get; init; }
        public string ClerkId { get; init; }
        public string GuestStayAccountId { get; init; }
        public string GuestStayId { get; init; }
        public string RoomId { get; init; }
    }
    public class GuestCheckedOut : System.IEquatable<HotelManagement.GuestStayAccounts.GuestCheckedOut>
    {
        public GuestCheckedOut(string GuestStayAccountId, string ClerkId, System.DateTimeOffset CheckedOutAt) { }
        public System.DateTimeOffset CheckedOutAt { get; init; }
        public string ClerkId { get; init; }
        public string GuestStayAccountId { get; init; }
    }
    public class GuestCheckoutFailed : System.IEquatable<HotelManagement.GuestStayAccounts.GuestCheckoutFailed>
    {
        public GuestCheckoutFailed(string GuestStayAccountId, string ClerkId, HotelManagement.GuestStayAccounts.GuestCheckoutFailed.FailureReason Reason, System.DateTimeOffset FailedAt) { }
        public string ClerkId { get; init; }
        public System.DateTimeOffset FailedAt { get; init; }
        public string GuestStayAccountId { get; init; }
        public HotelManagement.GuestStayAccounts.GuestCheckoutFailed.FailureReason Reason { get; init; }
        public enum FailureReason
        {
            NotOpened = 0,
            BalanceNotSettled = 1,
        }
    }
    public class GuestStayAccount : System.IEquatable<HotelManagement.GuestStayAccounts.GuestStayAccount>
    {
        public static readonly HotelManagement.GuestStayAccounts.GuestStayAccount Initial;
        public GuestStayAccount(string Id, [System.Runtime.CompilerServices.DecimalConstant(0, 0, 0u, 0u, 0u)] decimal Balance, HotelManagement.GuestStayAccounts.GuestStayAccountStatus Status = 1) { }
        public bool IsSettled { get; }
        public decimal Balance { get; init; }
        public string Id { get; init; }
        public HotelManagement.GuestStayAccounts.GuestStayAccountStatus Status { get; init; }
        public static HotelManagement.GuestStayAccounts.GuestStayAccount Evolve(HotelManagement.GuestStayAccounts.GuestStayAccount state, object @event) { }
        public static string GuestStayAccountId(string guestStayId, string roomId, System.DateOnly checkInDate) { }
    }
    public static class GuestStayAccountDecider
    {
        public static HotelManagement.GuestStayAccounts.GuestCheckedIn CheckIn(HotelManagement.GuestStayAccounts.CheckIn command, HotelManagement.GuestStayAccounts.GuestStayAccount state) { }
        public static object CheckOut(HotelManagement.GuestStayAccounts.CheckOut command, HotelManagement.GuestStayAccounts.GuestStayAccount state) { }
        public static HotelManagement.GuestStayAccounts.ChargeRecorded RecordCharge(HotelManagement.GuestStayAccounts.RecordCharge command, HotelManagement.GuestStayAccounts.GuestStayAccount state) { }
        public static HotelManagement.GuestStayAccounts.PaymentRecorded RecordPayment(HotelManagement.GuestStayAccounts.RecordPayment command, HotelManagement.GuestStayAccounts.GuestStayAccount state) { }
    }
    public class GuestStayAccountService
    {
        public GuestStayAccountService(HotelManagement.EventStore.IEventStore eventStore) { }
        public System.Threading.Tasks.Task CheckIn(HotelManagement.GuestStayAccounts.CheckIn command, System.Threading.CancellationToken ct = default) { }
        public System.Threading.Tasks.Task CheckOut(HotelManagement.GuestStayAccounts.CheckOut command, System.Threading.CancellationToken ct = default) { }
        public System.Threading.Tasks.Task RecordCharge(HotelManagement.GuestStayAccounts.RecordCharge command, System.Threading.CancellationToken ct = default) { }
        public System.Threading.Tasks.Task RecordPayment(HotelManagement.GuestStayAccounts.RecordPayment command, System.Threading.CancellationToken ct = default) { }
    }
    public enum GuestStayAccountStatus
    {
        NotExisting = 0,
        Opened = 1,
        CheckedOut = 2,
    }
    public class PaymentRecorded : System.IEquatable<HotelManagement.GuestStayAccounts.PaymentRecorded>
    {
        public PaymentRecorded(string GuestStayAccountId, decimal Amount, System.DateTimeOffset RecordedAt) { }
        public decimal Amount { get; init; }
        public string GuestStayAccountId { get; init; }
        public System.DateTimeOffset RecordedAt { get; init; }
    }
    public class RecordCharge : System.IEquatable<HotelManagement.GuestStayAccounts.RecordCharge>
    {
        public RecordCharge(string GuestStayAccountId, decimal Amount, System.DateTimeOffset Now) { }
        public decimal Amount { get; init; }
        public string GuestStayAccountId { get; init; }
        public System.DateTimeOffset Now { get; init; }
    }
    public class RecordPayment : System.IEquatable<HotelManagement.GuestStayAccounts.RecordPayment>
    {
        public RecordPayment(string GuestStayAccountId, decimal Amount, System.DateTimeOffset Now) { }
        public decimal Amount { get; init; }
        public string GuestStayAccountId { get; init; }
        public System.DateTimeOffset Now { get; init; }
    }
}